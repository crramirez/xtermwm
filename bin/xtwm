#!/bin/sh

# Xterm Window Manager
# ====================

# This script tries to find a working JVM and xtwm.jar, and then run
# the selected UI.
#
# -----------------------------------------------------------------------------
# The MIT License (MIT)
#
# Copyright (c) 2021 Autumn Lamonte
#
# Permission is hereby granted, free of charge, to any person
# obtaining a copy of this software and associated documentation files
# (the "Software"), to deal in the Software without restriction,
# including without limitation the rights to use, copy, modify, merge,
# publish, distribute, sublicense, and/or sell copies of the Software,
# and to permit persons to whom the Software is furnished to do so,
# subject to the following conditions:
#
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
# BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
# ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
# CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
# -----------------------------------------------------------------------------

# NOTE: if you want a different set of properties, simply prefix a
# directory containing xtwm.properties to the classpath.

# -----------------------------------------------------------------------------
# Functions -------------------------------------------------------------------
# -----------------------------------------------------------------------------

display_help ()
{
    echo "Xterm Window Manager"
    echo
    echo "Usage: xtwm [OPTIONS]"
    echo
    echo "Available options:"
    echo
    echo
    echo "  --width COLUMNS          Size window to at least COLUMNS wide."
    echo "  --height ROWS            Size window to at least ROWS tall."
    echo
    echo "  -t                       Use existing text terminal."
    echo "  -w                       Open in a new Swing window."
    echo
    echo "  --tmux                   Open in new detachable tmux session."
    echo
    echo "  --gnu-screen             Open in new detachable GNU screen session."
    echo
    echo "  --server                 Open in new detachable sharable session."
    echo "  --list                   List sessions."
    echo "  --connect [ SESSION ]    Connect to session."
    echo
    echo "  --layout FILENAME        Load window/panel layout from FILENAME."
    echo
    echo "  --version                Display version and license information and exit."
    echo "  -h, --help, -?           Print this usage and exit."
    exit 1;
}

# -----------------------------------------------------------------------------
# Main ------------------------------------------------------------------------
# -----------------------------------------------------------------------------

# Start with bin and shared directories, add $(dirname $0) too.
JAR_PATHS="bin /usr/share/java /usr/local/share/java $(dirname $(which $0))"
JAR_PATHS="$JAR_PATHS java/build/jar build/jar"

for i in $JAR_PATHS ; do
    if [ -f $i/xtwm.jar ]; then
        XTWM_JAR=$i/xtwm.jar
    fi
done
if [ -z $XTWM_JAR ]; then
    echo "Error: xtwm.jar not found.  Looked in: $JAR_PATHS"
    return 1
fi

JAVA=java
UI=xtwm.Main
OPTS=
XTWMARGS=

case "$1" in
    --width)
        XTWMARGS="$XTWMARGS $1 $2"
        shift
        shift
        ;;
    --height)
        XTWMARGS="$XTWMARGS $1 $2"
        shift
        shift
        ;;
    --version)
        XTWMARGS="$XTWMARGS $1"
        shift
        ;;
    -h)
        display_help
        ;;
    --help)
        display_help
        ;;
    -t)
        # ECMA48/Xterm UI.  This will not work on the Windows console.
        OPTS="-Djexer.Swing=false"
        shift
        ;;
    -w)
        # Swing UI, naive output.  This is faster to start, but has
        # more screen tearing.

        # OPTS="-Djexer.Swing=true -Djexer.Swing.tripleBuffer=false"

        # Swing UI, triple-buffered output.  This may take longer to
        # start, but has less screen tearing.
        OPTS="-Djexer.Swing=true -Djexer.Swing.tripleBuffer=true"
        shift
        ;;
    --layout)
        XTWMARGS="$XTWMARGS $1 $2"
        shift
        shift
        ;;
    --tmux)
        # Spawn inside tmux, which also requires EMCA48/Xterm UI.
        OPTS="-Djexer.Swing=false -Dxtwm.insideTmux=true -Dxtwm.tmuxSessionName=xtwm-$$"
        JAVA="tmux new-session -s xtwm-$$ $JAVA"
        shift
        ;;
    --gnu-screen)
        # Spawn inside screen, which also requires EMCA48/Xterm UI.
        OPTS="-Djexer.Swing=false -Dxtwm.insideGnuScreen=true -Dxtwm.gnuScreenSessionName=xtwm-$$"
        JAVA="screen -S xtwm-$$ $JAVA"
        shift
        ;;
    --server)
        # Spawn inside a telnet server.
        SERVER=yes
        shift
        ;;
    --list)
        ls ~/.xtwm/xtwm.[0-9]* 1>/dev/null 2>/dev/null
        rc=$?
        if [ ! x$rc = "x0" ]; then
            echo "No servers running."
        else
            echo "Available servers:"
            echo
            for file in `ls ~/.xtwm/xtwm.[0-9]*` ; do
                echo $(basename $file)
            done
        fi
        exit 1;
        ;;
    --connect)
        CONNECT=yes
        SESSION=$2
        if [ ! -z $SESSION ]; then
            shift
        fi
        shift
        ;;
    -?)
        display_help
        ;;
    *)
        ;;
esac

# For debugging, enable assertions
OPTS="$OPTS -ea"
CMDLINE="$JAVA -cp $XTWM_JAR $OPTS $UI $XTWMARGS $*"

if [ x$CONNECT = "xyes" ]; then
    if [ ! -z $SESSION ] ; then
        PORT=$(cat ~/.xtwm/${SESSION})
    else
        ls ~/.xtwm/xtwm.[0-9]* 1>/dev/null 2>/dev/null
        rc=$?
        if [ ! x$rc = "x0" ]; then
            echo "No servers to connect to."
            exit 1;
        fi
        PORT=$(cat ~/.xtwm/xtwm.[0-9]*)
    fi
    if [ x$(which telnet) = x ]; then
        echo "telnet not found."
        echo
        echo "Telnet to localhost port $PORT to connect to XtermWM."
    else
        exec telnet -a localhost $PORT
    fi
elif [ x$SERVER = "xyes" ]; then
    # echo Start as server
    PID_FILE=~/.xtwm/xtwm.$$
    CMDLINE="$CMDLINE --server $PID_FILE"
    # echo "Executing: $CMDLINE"
    nohup $CMDLINE >/dev/null 2>>~/.xtwm/server-errors &

    while [ ! -s $PID_FILE ]; do sleep 0.1; done
    PORT=$(cat $PID_FILE)
    if [ x$(which telnet) = x ]; then
        echo "telnet not found."
        echo
        echo "Telnet to localhost port $PORT to connect to XtermWM."
    else
        # Disable telnet escape, as this client will always be
        # read-write.
        exec telnet -a -e none localhost $PORT
    fi
else
    # echo "Executing: $CMDLINE"
    $CMDLINE
fi
